{"pages":[],"posts":[{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","link":"/2021/02/04/hello-world/"},{"title":"基于Hexo和Github Pages建立个人博客&lt;基础篇&gt;","text":"早早就考虑着“记录点学习过程中遇到的问题与困难罢，留点念想也分享那些年踩过的坑，给他人立个告示牌”。却始终不知从何入手—我不希望在那些充斥着垃圾信息以及各类广告链接的网站上托管这些属于自己的东西。 前几日忽想起来，我完全可以建立一个个人网站啊！一个彻彻底底干净的环境，没有任何的干扰，完全自定义化。这完全符合我的需求！于是便通过各大搜索引擎确定了一个最简易、成本最低、最适合无任何前端知识储备的我上手的方案：Hexo+Github pages。 1. 搭建Hexo必要环境1.1 安装Git “I’ve met people who thought git is a front-end to GitHub. They were wrong, git is a front-end to the AUR.” — Linus T. Git是一个由Linux之父 Linus Torvalds 编写的版本控制系统，用于优雅快捷地管理项目。您可以通过Git官网获取Windows, MacOS以及Linux系统下的安装方式。 它的使用方式我们暂且不讨论，在这儿它仅仅是作为Hexo系统的一个必须依赖项。 1.2 安装Node.jsNode.js 是一个 javascript 运行环境，并附带有功能丰富的库。使用Google’s V8引擎在浏览器外执行代码。您可以通过Node.js官网获取安装方式。 2. 安装Hexo并搭建本地网页Hexo是一个快速、简洁且高效的博客框架。Hexo使用Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。 1.1 创建一个文件夹在开始部署我们网页之前，我们需要在磁盘任意位置新建一个文件夹并将工作目录跳转到该目录。以后所有与该项目有关的文件均会被存放在这里。例如: 12$ mkdir $HOME/blog$ cd $HOME/blog 如无特殊指定，下文所有命令皆在刚创立的文件目录下执行！ 1.2 建立基本网页在您的终端中输入以下命令以建立基础网站框架： 123$ npm config set registry https://registry.npm.taobao.org/ #使npm通过国内镜像源下载文件$ npm install -g hexo-cli #安装Hexo软件包$ hexo init #在当前目录下建立网站 这样，一个简单的网站就已经建好了，您可以输入以下命令进行来查看它： 12$ hexo generate #生成静态文件$ hexo server #启动本地服务器端口，默认地址为http://localhost:4000/ 在您的浏览器地址栏中输入localhost:4000，即可看见您的网页了！","link":"/2021/02/04/%E5%9F%BA%E4%BA%8EHexo%E5%92%8CGithub-Pages%E5%BB%BA%E7%AB%8B%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2-1/"}],"tags":[],"categories":[]}